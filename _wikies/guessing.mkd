---
title: Guessing
---

以下为我的不靠谱猜测。

Python对象模型
==============


在 Python 中，一切数据(data)都是对象(object)，一个整数是一个对象，一个字符串也是一个对象，你可以把这些对象想象成在内存中实打实的存在的物件，它们持有数据。而变量，只是指向这些物件的索引(reference)。更进一步，不只是变量，我们可以在程序中直接使用的比如数字，叫做字面表示(literal)的东西，也只是指向某种类型的对象的标识。举例来说，`[0]`, `[0, 0, 0]` 和 `3` 都是相对应的对象的字面表示。这里简单总结一下，Python 里一切数据都是对象，我们可以用变量或者字面表示来索引这些对象。

认识了这一点，我们再来看 `3 * [0]` 或者说 `[0, 0, 0]`。这个列表中存放的是三个整型对象（物件）吗？断呼不是。这个列表里存放的只是三个字面常量，它们各自指着一个整型对象，当然，它们也可以纷纷指向同一个对象（本例）。再进一步，真正存有三个字面常量的是一个“列表对象”，`[0, 0, 0]` 也只是指向这个列表对象的一个字面表示(literal)而已。

					   +------+	    +--------+
					   |  0 --|---> |  int	 |
		[0, 0, 0] ---> |  0 --|---> | object |
	    (literal)      |  0 --|---> |	0 	 |
					   +------+     +--------+
				       (列表对象)    (整型对象)

现在真正来看 `3 * [0]` 做了什么。它生成一个列表对象，该列表对象存有三个指向同一个整型对象 0 的字面常量，同时，我们可以用标识符 `[0, 0, 0]` 来索引这个列表对象。

			
				   +-------------+     +------+	    +--------+
	 [[0,0,0],	   | [0, 0, 0] --|---> |  0 --|---> |  int	 |
	  [0,0,0], --->| [0, 0, 0] --|---> |  0 --|---> | object |
	  [0,0,0]]	   | [0, 0, 0] --|---> |  0 --|---> |	0 	 |
				   +-------------+     +------+     +--------+
      字面表示        列表对象          列表对象       整型对象
