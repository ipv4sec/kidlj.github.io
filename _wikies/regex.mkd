---
title: 正则表达式
---


综述
====

正则表达式是用来匹配某些字符串的模式表达式。

目前主要有三种正则表达式(`man grep`)：

*	Basic Regular Expressions (BRE)
*	Extended Regular Expressions (ERE)
*	Perl-Compatible Regular Expressions (PCRE)

### 元字符

有两种常见的元字符，Shell 元字符和正则表达式元字符。Shell 元字符由 Shell
解释，正则表达式元字符由各执行模式匹配操作的程序解释。两种元字符的意义不
一样。


基本元字符(BRE)
===============

所有UNIX模式匹配工具都适用。

+ `^`      	Matches the null string at the beginning of a line;
+ `$` 		Matches the null string at the end of a line;
+ `.` 		Matches any single character;
+ `*` 		Matches a sequence of 0 or more matches of the preceding item;
+ `[ ]` 	Matches any single character from the list;
+ `[^ ]` 	Matches any single character not from the rest of the list;
+ `[x-y]` 	Matches any single character in the full range of characters  
			between those two(Mind LC_COLLATE please);
+ `\` 		Followed by one of these characters: `^ $ . * [`,  
			matching that character taken as an ordinary character.




扩展元字符(ERE)
===============


### 边界

+ `\<`		Matches the null string at the beginning of a word;
+ `\>` 		Matches the null string at the end of a word;  
+ `\b`		Matches the null string at the edge of a word;
+ `\B` 		Matches the null string provided it's not at the edge  
			of a word;
+ `\w`		Is synonym for `[_[:alnum:]]`;
+ `\W`		Is synonym for `[^_[:alnum:]]`;

Word-constituent characters are letters, digits and `_`s.

### 量词

+ `?` 		The preceding item is optional and matched at most once;
+ `*`		The preceding item will be matched zero or more times;
+ `+` 		The preceding item wil be matched one or more times;
+ `{n}`		The preceding item is matched exactly `n` times;
+ `{n,}`	The preceding item is matched `n` or more times;
+ `{,m}`	The preceding item is matched at most `m` times;
+ `{n, m}`	The preceding item is matched at least `n` times, but not  
			more than `m` times.

未经修饰的量词都是「贪婪」量词。修饰量词的特性见 PCRE。

### 字符组

	[:alnum:]  
	[:alpha:]
	...
	[:xdigit:]

### Bracket Expressions

Most meta-characters lose their special meaning inside bracket expressions.

In a bracket expression,

+ To include a literal `]`, place it first in the list.
+ To include a literal `^`, place it anywhere but first.
+ To include a literal `-`, place it last.



Perl 元字符(PCRE)
=================

参见 `man 3 pcresyntax`


群魔乱舞
========

### GNU Grep

GNU Grep 支持三种正则表达式，可以用选项指定使用哪种正则实现：

	$ grep [-G]		# 默认为BRE
	$ grep -E		# 启用ERE
	$ grep -P		# 启用PCRE


GNU Grep 中的 BRE 和 GRE 没有功能性上的差别，不过一些符号的使用需要注意(`man grep`)：

> 如果使用的是 BRE，那么 `?, +, {, |, (, )` 将失去其特殊意义，这些功能应该使用 `\?, \+, \{, \|, \(, \)`来替代。



### GNU Find

GNU `find` 可以用 `-regextype type` 来指定正则表达式引擎，目前理解这些类型的正则表达式(`man find`)：

	emacs(default), posix-awk, posix-basic, posix-egrep, posix-extended

（WTF? 怎么又冒出那么多不同实现？尼玛都是 GNU 一家的就不能弄统一了？！）

### Python

Python 的内置模块 `re` 使用 PCRE。
