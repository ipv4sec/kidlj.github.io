---
title: 为什么 Node 选择了 Javascript
---

事件驱动编程为实现大规模并发请求服务提供了一个很好的解决方案，除了 Node.js 以外，其他语言社区也有类似框架的实现，比如 Ruby 社区的 Event Machine 和 Python 社区的 Twisted。用这些框架开发程序不仅需要掌握该框架的知识，还需要使用相对应的工具库，比如在使用 Event Machine 时你需要专门的异步 IO 库，而不能使用 Ruby 的标准 IO 库，因为这会阻塞 event loop 的执行。Node.js 构建于 Javascript 之上，而 Javascript 是一门很 mini 的语言而且它没有标准 IO 库，因此 Node 有了一个很干净的基础来构建成为异步平台，于是你可以认为在 Node 平台基础上构建的一切都是异步的。Node.js 的创立者，Ryan Dahl，也曾想过用 Lua 语言作为 Node 的平台语言，但 Lua 已经有了成熟的阻塞式 IO 库，而阻塞和非阻塞的工具库混合使用会给开发者带来困惑。

另一方面，Javascript 的闭包和函数作为一等对象的特性也天然适合事件驱动编程模型。函数作为一等对象，可以很方便地作为另一个函数的参数进行传递，这在定义事件回调函数的时候经常使用。而闭包特性，也就是说一个函数可以记住并使用它定义时候的包裹环境的变量，当回调函数执行时，可以魔法般地使用调用它的函数内部的变量，这省去了大量的将调用者环境上下文传递给后来要执行的回调函数的工作。

综合以上两点，Javascript 成为了构建事件驱动编程平台 Node 的完美选择，并很快流行起来。
